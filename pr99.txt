import os 
import shutil
import time 


#main function
def main():

        # initializing the count 
        deleted_folders_count = 0
        deleted_files_count = 0

        # specify the path 
        path = "PATH_TO_DELETE"

        #specify the days
        days = 30

        # converting days to seconds
        #time.time() returns current time in seconds
        seconds = time.time() - (days * 24 * 60 * 60)

        #chenking whether the file is present in path or not
        if os.path.exists(path):

                # iterating over each and every folder and file in the path
                for root_folder,folder,files in os.walk(path):

                        # comparing the days 
                        if seconds >= get_file_or_folder_age(root_folder):

                                    #removing the folder 
                                    remove_folder(root_folder)
                                    deleted_folders_count += 1 #incrementing count

                                    #breaking after removing the root_folder
                                    break


                           else:

                                    #checking folder from th root_folder
                                    for folder in folder:

                                          # folder path 
                                          folder_path = os.path.join(root_folder,folder)


                                              # invoking the remove_folder functions
                                              remove_folder(folder_path)
                                              deleted_folder_count += 1 # incrementing count   



                                   # checking the current directory files
                                   for file in files:
                                   
                                            # file path
                                            file_path = os.path.join)roots_folder, file

                                            #comparing the days
                                            if seconds >= get_file_or_folder-age(file_path):

                                                  # invoking the remove_file functions
                                                  remove-file(file_path)
                                                  deleted_files_count >= 1 # incrementing count

                   else:

                            # if the path is not a directory
                            # comparing with the days
                            if seconds >= get_file_or_folder_age(path)

                                # invoking the file
                                remove_file(path)
                                deleted_files_count += 1 #incrementing count

                  else:

                        #file/folder is not found
                        print(f'"{path}" is not found')
                        deleted_files_count += 1 # incrementing count

                  print(f"total folders deleted: {deleted_folders_count}")
                  print(f"total files deleted: {deleted_files_count})


def remove_folder(path):

                #removing the folder
                if not shutil.rmtree(path)

                        # success message
                        print(f"{path}is removed successfully")

                else:

                        #failure message 
                        print(f"Unable to delete the "+path)



def remove_file(path):

         #removing the file
         if not os..remove(path)

                # success message
                print(f"{path} is removed successfully")

         else:

                #failure message
                print("Unable to delet the "+path)


def get_file_or_folder_age(path):

        # getting ctime of the file/folder
        # time will be in seconds 
        ctime = os.stat(path).st_ctime

        # returning the time 
        return ctime


if_name_=='_main_':
        main()